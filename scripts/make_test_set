#!/usr/bin/env python3
import click
import json
import random
import tqdm
from zipfile import ZipFile
from mldc.preprocessing.stream import stream_dlgs


def sample(iterable, n):
  reservoir = []
  for t, item in enumerate(iterable):
    if t < n:
      reservoir.append(item)
    else:
      m = random.randint(0, t)
      if m < n:
        reservoir[m] = item
  return reservoir


def sample_predict_turn(dlg):
  # we assume that the user (who we want to predict) always takes the odd turns
  n_response_turns = len(dlg.turns) // 2
  return 1 + 2 * random.randint(0, n_response_turns - 1)


@click.command()
@click.argument("metalwoz_zip_file", type=click.Path(dir_okay=False, exists=True, readable=True))
@click.argument("output", type=click.File('wt'))
@click.option('--n-support-dlgs', default=128, type=int, show_default=True)
@click.option('--cross-task', is_flag=True, help="support set has different tasks than target set")
@click.option('--pure-task', is_flag=True, help="support set has only same tasks as target set")
def create_test_set(metalwoz_zip_file, output, n_support_dlgs, cross_task, pure_task):
  assert not (cross_task and pure_task), "Only one of --cross-task and --pure-task can be provided"

  with ZipFile(metalwoz_zip_file, 'r') as zf:
    files_in_zip = [fn for fn in zf.namelist()]

  for file in files_in_zip:
    if not file.startswith('dialogues/'):
      continue

    dlgs = [dlg for dlg in stream_dlgs(metalwoz_zip_file, file)]

    for target_dlg in tqdm.tqdm(stream_dlgs(metalwoz_zip_file, file), desc=file):

      def ok(support_dlg):
        if support_dlg.id == target_dlg.id:
          return False
        if cross_task and target_dlg.task_id == support_dlg.task_id:
          return False
        if pure_task and target_dlg.task_id != support_dlg.task_id:
          return False
        return True

      support_dlgs = sample((dlg.id for dlg in dlgs if ok(dlg)), n_support_dlgs)
      output.write(json.dumps(dict(target_dlg=target_dlg.id,
                                   support_dlgs=support_dlgs,
                                   predict_turn=sample_predict_turn(target_dlg))) + "\n")


if __name__ == '__main__':
  create_test_set()
